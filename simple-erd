#!/usr/bin/env ruby

require 'optparse'

required_options = {
  input: nil,
  output: nil,
  output_format: "pdf"
}

OptionParser.new do |parser|
  parser.on("-i", "--input PATH", "A path to the input file.") do |v|
    required_options[:input] = v
  end

  parser.on("-o", "--output PATH", "A path to the output file.") do |v|
    required_options[:output] = v
  end

  parser.on("-f", "--format FORMAT", "Output file format. See a list of available formats here: http://www.graphviz.org/doc/info/output.html") do |v|
    required_options[:output_format] = v
  end
end.parse!

required_options.each do |key, value|
  if required_options[key].nil?
    puts "Please, specify '#{key}' parameter."
    puts ""
    puts "For further help, run:"
    puts ""
    puts "  simple-erd --help"

    exit(1)
  end
end

input_filename = required_options[:input]
output_filename = required_options[:output]
output_format = required_options[:output_format]

input = IO.read(input_filename)

node_template = %{
"%{entity_name}" [label=<%{entity_contents}>]
}

table_template = %(
<table border="0" cellborder="0" cellspacing="0" bgcolor="#FFFFFF">
  <tr>
    <td colspan="3" border="1" bgcolor="#EEEEEE" cellpadding="0"><font face="PT Mono"><b>%{entity_name}</b></font></td>
  </tr>
  %{attributes}
</table>
)

row_template = %Q(
<tr>
  <td border="1" sides="l%{b}" align="left" port="id"><font face="PT Mono">%{column_name}&nbsp;</font></td>
  <td %{draw_bottom} align="left"><font color="#999999" face="PT Mono">%{column_type}&nbsp;</font></td>
  <td border="1" sides="r%{b}" align="left"><font color="#CCCCCC" face="PT Mono">%{null_or_not}</font></td>
</tr>
)

edge_template = %{%{from} -> %{to} [headlabel="%{to_n}", taillabel="%{from_n}", arrowtail=odot, arrowhead=none, style="%{line_type}", fontname="PT Mono"]}

@cluster_n = 0

contents =
  input.split("\n\n").map do |group|
    lines = group.strip.split("\n")

    case
    when lines[0].start_with?("[")
      entity_name = lines[0].scan(/\w+/)[0]

      n_of_attributes = lines[1..-1].size

      if entity_name[-1] != "s"
        puts "Warning: '#{entity_name}' table name must be in plural form"
      end

      attributes =
        lines[1..-1].map.with_index do |line, idx|
          match = line.match /(?<a>.[^\|]*)\s?\|?\s?(?<b>.[^\|]*)?\s?\|?\s?(?<c>.[^\|]*)?/

          draw_bottom = idx == n_of_attributes - 1

          if match[:a].strip.end_with?("_id") && match[:b].strip == "TEXT"
            puts "Warning: '#{entity_name}'.'#{match[:a].strip}' seem to be a primary or secondary key. Are you sure it's type is TEXT?"
          end

          if match[:b].strip == "VARCHAR(36)"
            puts "Warning: '#{entity_name}'.'#{match[:a].strip}' is a UUID? Consider using built-in type, UUID"
          end

          if match[:c] == "NULL"
            puts "Warning: '#{entity_name}'.'#{match[:a].strip}' - no need to specify explitit NULL"
          end

          (row_template % {
            column_name: match[:a],
            column_type: match[:b],
            null_or_not: match[:c] || "&nbsp;",
            b: draw_bottom ? "b" : "",
            draw_bottom: draw_bottom ? 'border="1" sides="b"' : ""
          }).strip
        end.join("\n")

      table =
        table_template % {
          entity_name: entity_name,
          attributes: attributes
        }

      node_template % {
        entity_name: entity_name,
        entity_contents: table
      }
    when lines[0].start_with?("(")
      cluster_name = lines[0].match(/\((.*)\)/)[1]

      @cluster_n += 1

      %Q{
        subgraph cluster_#{@cluster_n} {
          label = "#{cluster_name}";
          labeljust = "l";
          style=filled;
          fontname = "PT Mono";
          color="#f0f1fe";

          #{lines[1..-1].join(",")};
        }
      }
    else
      lines.map do |line|
        from, relation, to = line.split(" ")
        from_n, to_n = relation.split("--")

        t = ->(string) {
          case string
          when "?" then "0..1"
          when "1" then "1"
          when "*" then "0..n"
          when "+" then "1..n"
          when "x" then "???"
          end
        }

        line_type = "dashed"

        edge_template % {
          line_type: line_type,
          from: from,
          from_n: t.(from_n),
          to: to,
          to_n: t.(to_n),
        }
      end
    end
  end.join("\n")

File.open("test.dot", "w+") do |f|
  f.puts "
digraph G {
  node [shape=plaintext]

  #{contents}
}
  "
end

`dot test.dot -T#{output_format} > #{output_filename}`
`open #{output_filename}`
